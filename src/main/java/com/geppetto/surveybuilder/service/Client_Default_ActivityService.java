package com.geppetto.surveybuilder.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;

import com.geppetto.surveybuilder.domain.core.Client;
import com.geppetto.surveybuilder.domain.core.GpUser;
import com.geppetto.surveybuilder.mysql.Client_Default_ActivityDao;



/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("Client_Default_ActivityService")
public class Client_Default_ActivityService extends GpBaseService  {


	Client_Default_ActivityDao Client_Default_Activity_dao;


	public Client_Default_ActivityDao get_Client_Default_Activity_dao() {
		return Client_Default_Activity_dao;
	}


	@Resource(name="Client_Default_ActivityDao")
	public void set_Client_Default_Activity_dao(Client_Default_ActivityDao Client_Default_Activity_dao) {
		this.Client_Default_Activity_dao = Client_Default_Activity_dao;
	}



	//auths not ready at this time
	public Client create_client(Client Client, GpUser user) throws Exception {


		try{
			Client the_Client;

			the_Client = Client_Default_Activity_dao.create_client(Client, user);

			return the_Client;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}

	//auths not ready at this time
	public Client client_search_for_update(long id, GpUser user) throws Exception {


		try{
			Client the_Client;

			the_Client = Client_Default_Activity_dao.client_search_for_update(id, user);

			return the_Client;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}

	//auths not ready at this time
	public Client update_client(Client Client, GpUser user) throws Exception {


		try{
			Client the_Client;

			the_Client = Client_Default_Activity_dao.update_client(Client, user);

			return the_Client;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}

	//auths not ready at this time
	public String  delete_client(long id, GpUser user) throws Exception {


		try{
			String method_return_message;

			method_return_message = Client_Default_Activity_dao.delete_client(id, user);

			return method_return_message;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}

	//auths not ready at this time
	public ArrayList<Client> get_all_client() throws Exception {


		try{
			ArrayList<Client> Client_list;

			Client_list = Client_Default_Activity_dao.get_all_client();

			return Client_list;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}




}