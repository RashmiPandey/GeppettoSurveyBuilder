package com.geppetto.surveybuilder.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;

import com.geppetto.surveybuilder.domain.core.GpUser;
import com.geppetto.surveybuilder.domain.core.Product;
import com.geppetto.surveybuilder.mysql.Product_Default_ActivityDao;



/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("Product_Default_ActivityService")
public class Product_Default_ActivityService extends GpBaseService  {


	Product_Default_ActivityDao Product_Default_Activity_dao;


	public Product_Default_ActivityDao get_Product_Default_Activity_dao() {
		return Product_Default_Activity_dao;
	}


	@Resource(name="Product_Default_ActivityDao")
	public void set_Product_Default_Activity_dao(Product_Default_ActivityDao Product_Default_Activity_dao) {
		this.Product_Default_Activity_dao = Product_Default_Activity_dao;
	}



	//auths not ready at this time
	public Product create_product(Product Product, GpUser user) throws Exception {


		try{
			Product the_Product;

			the_Product = Product_Default_Activity_dao.create_product(Product, user);

			return the_Product;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}

	//auths not ready at this time
	public Product product_search_for_update(long id, GpUser user) throws Exception {


		try{
			Product the_Product;

			the_Product = Product_Default_Activity_dao.product_search_for_update(id, user);

			return the_Product;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}

	//auths not ready at this time
	public Product update_product(Product Product, GpUser user) throws Exception {


		try{
			Product the_Product;

			the_Product = Product_Default_Activity_dao.update_product(Product, user);

			return the_Product;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}

	//auths not ready at this time
	public String  delete_product(long id, GpUser user) throws Exception {


		try{
			String method_return_message;

			method_return_message = Product_Default_Activity_dao.delete_product(id, user);

			return method_return_message;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}

	//auths not ready at this time
	public ArrayList<Product> get_all_product() throws Exception {


		try{
			ArrayList<Product> Product_list;

			Product_list = Product_Default_Activity_dao.get_all_product();

			return Product_list;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}
	
	public ArrayList<Product> get_product_by_client_id(long id) throws Exception {


		try{
			ArrayList<Product> Product_list;

			Product_list = Product_Default_Activity_dao.get_product_by_client_id(id);

			return Product_list;			

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;


	}




}