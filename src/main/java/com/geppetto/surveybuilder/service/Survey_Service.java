package com.geppetto.surveybuilder.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.geppetto.surveybuilder.domain.core.GpUser;
import com.geppetto.surveybuilder.domain.core.Option;
import com.geppetto.surveybuilder.domain.core.Question;
import com.geppetto.surveybuilder.domain.core.Survey;
import com.geppetto.surveybuilder.domain.core.Survey_Dto;
import com.geppetto.surveybuilder.dto.DtoToEntity;
import com.geppetto.surveybuilder.dto.EntityToDTO;
import com.geppetto.surveybuilder.dto.SurveyDTO;
import com.geppetto.surveybuilder.mysql.OptionDao;
import com.geppetto.surveybuilder.mysql.QuestionDao;
import com.geppetto.surveybuilder.mysql.Survey_Dao;

/**
 * 
 * @author Geppetto Generated Code</br> Date Created: </br>
 * @since </br> build: </p>
 *
 *        code was generated by the Geppetto System </br> Gepppetto system
 *        Copyright - Geppetto LLC 2014 - 2015</br> The generated code is free
 *        to use by anyone</p>
 *
 *
 *
 */
@Service("Survey_Default_ActivityService")
public class Survey_Service extends GpBaseService {

	Survey_Service Survey_Default_Activity_service;

	QuestionService Question_service;

	OptionService Option_service;

	Survey_Dao Survey_Default_Activity_dao;

	QuestionDao QuestionDao;

	OptionDao OptionDao;

	public QuestionService get_Question_service() {
		return Question_service;
	}

	@Resource(name = "QuestionService")
	public void set_Question_service(QuestionService Question_service) {
		this.Question_service = Question_service;
	}

	public Survey_Service get_Survey_Default_Activity_service() {
		return Survey_Default_Activity_service;
	}

	@Resource(name = "Survey_Default_ActivityService")
	public void set_Survey_Default_Activity_service(
			Survey_Service Survey_Default_Activity_service) {
		this.Survey_Default_Activity_service = Survey_Default_Activity_service;
	}

	public OptionService get_Option_service() {
		return Option_service;
	}

	@Resource(name = "OptionService")
	public void set_Option_service(OptionService Option_service) {
		this.Option_service = Option_service;
	}

	public Survey_Dao get_Survey_Default_Activity_dao() {
		return Survey_Default_Activity_dao;
	}

	@Resource(name = "Survey_Default_ActivityDao")
	public void set_Survey_Default_Activity_dao(
			Survey_Dao Survey_Default_Activity_dao) {
		this.Survey_Default_Activity_dao = Survey_Default_Activity_dao;
	}

	public QuestionDao get_QuestionDao() {
		return QuestionDao;
	}

	@Resource(name = "QuestionDao")
	public void set_QuestionDao(QuestionDao QuestionDao) {
		this.QuestionDao = QuestionDao;
	}

	public OptionDao get_OptionDao() {
		return OptionDao;
	}

	@Resource(name = "OptionDao")
	public void set_OptionDao(OptionDao OptionDao) {
		this.OptionDao = OptionDao;
	}

	public ArrayList<Survey_Dto> get_survey_by_id(long Survey_id)
			throws Exception {
		try {
			ArrayList<Survey_Dto> Survey_list;

			Survey_list = Survey_Default_Activity_dao
					.get_survey_by_id(Survey_id);

			return Survey_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;
	}

	public String delete_survey_for_desktop(long id, GpUser user)
			throws Exception {
		try {
			String method_return_message;
			method_return_message = Survey_Default_Activity_dao
					.delete_survey_for_desktop(id, user);
			return method_return_message;
		} catch (Exception e) {
			System.out.println("ServiceException: " + e.toString());
		}
		return null;
	}

	public Survey_Dto update_survey_for_desktop(Survey_Dto request)
			throws Exception {

		try {
			Survey_Dto Survey_list;

			Survey_list = Survey_Default_Activity_dao
					.update_survey_for_desktop(request);

			return Survey_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	public List<Survey> get_surveys() throws Exception {

		try {
			List<Survey> Survey_list = Survey_Default_Activity_dao
					.get_surveys();

			if (Survey_list != null) {
				for (Survey survey : Survey_list) {
					// get survey all question
					List<Question> questionList = this.QuestionDao
							.get_question_by_survey_id(survey.getId());

					if (questionList != null) {
						// iterate all question list
						for (Question question : questionList) {

							// get question options
							ArrayList<Option> optionList = this.OptionDao
									.get_option_by_question_id(question.getId());

							question.setOptions(optionList);

						}
					}

					survey.setQuestion(questionList);
				}
			}

			return Survey_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	public ArrayList<Survey_Dto> get_all_Survey_for_desktop() throws Exception {
		try {
			ArrayList<Survey_Dto> Survey_list;

			Survey_list = Survey_Default_Activity_dao
					.get_all_Survey_for_desktop();

			return Survey_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;
	}

	public Survey_Dto create_survey_for_desktop(Survey_Dto request)
			throws Exception {

		try {
			Survey_Dto Survey_list;

			Survey_list = Survey_Default_Activity_dao
					.create_survey_for_desktop(request);

			return Survey_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public Survey create_survey(Survey Survey, GpUser user) throws Exception {

		try {
			Survey the_Survey;

			the_Survey = Survey_Default_Activity_dao
					.create_survey(Survey, user);

			return the_Survey;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	public SurveyDTO create_survey(SurveyDTO the_SurveyDTO, GpUser user)
			throws Exception {

		try {

			Survey a_Survey = DtoToEntity.convertSurvey(the_SurveyDTO);

			if (a_Survey.getId() == 0) {
				Survey inserted_Survey = Survey_Default_Activity_service
						.create_survey(a_Survey, user);

				// set created survey id
				a_Survey.setId(inserted_Survey.getId());

			} else {
				Survey_Default_Activity_service.update_survey(a_Survey, user);
			}

			List<Question> questionListFromEntity = a_Survey.getQuestion();

			if (questionListFromEntity != null) {
				for (Question questionEntity : questionListFromEntity) {

					if (questionEntity == null) {
						continue;
					}
					// set survey id
					questionEntity.setSurvey_id(a_Survey.getId());

					if (questionEntity.getId() == 0) {
						Question insertedQuestion = Question_service
								.create_question_new(questionEntity, user);

						// set created question id
						questionEntity.setId(insertedQuestion.getId());
					} else {
						questionEntity = Question_service.update_question(questionEntity, user);
					}

					List<Option> optionsListFromEntity = questionEntity
							.getOptions();

					if (optionsListFromEntity != null) {

						for (Option optionEntity : optionsListFromEntity) {

							if (optionEntity == null) {
								continue;
							}

							// set question id
							optionEntity.setQuestion_id(questionEntity.getId());

							if (optionEntity.getId() == 0) {
								Option insertedOption = Option_service
										.create_option(optionEntity, user);

								// set option id
								optionEntity.setId(insertedOption.getId());
							} else {
								Option_service
										.update_option(optionEntity, user);
							}
						}
					}
				}
			}

			return EntityToDTO.convertSurvey(a_Survey);
		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public Survey survey_search_for_update(long id) throws Exception {

		try {
			Survey the_Survey;

			the_Survey = Survey_Default_Activity_dao
					.survey_search_for_update(id);

			return the_Survey;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public Survey update_survey(Survey Survey, GpUser user) throws Exception {

		try {
			Survey the_Survey;

			the_Survey = Survey_Default_Activity_dao
					.update_survey(Survey, user);

			return the_Survey;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public String delete_survey(long id, GpUser user) throws Exception {

		try {
			String method_return_message;

			method_return_message = Survey_Default_Activity_dao.delete_survey(
					id, user);

			return method_return_message;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public Map<String, Object> get_all_survey() throws Exception {

		try {
			Map<String, Object> Survey_list;

			Survey_list = Survey_Default_Activity_dao.get_all_survey();

			return Survey_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	public List<Survey> get_all_survey_new() throws Exception {

		try {

			return Survey_Default_Activity_dao.get_all_survey_new();

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public ArrayList<Survey> search_survey(String Survey_name,
			String Survey_description, String Survey_notes, String Client_name,
			String Product_name, String Country_name) throws Exception {

		try {
			ArrayList<Survey> Survey_list;

			Survey_list = Survey_Default_Activity_dao.search_survey(
					Survey_name, Survey_description, Survey_notes, Client_name,
					Product_name, Country_name);

			return Survey_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	public ArrayList<Survey> get_all_survey_table() throws Exception {

		try {
			ArrayList<Survey> Survey_list;

			Survey_list = Survey_Default_Activity_dao.get_all_survey_table();

			return Survey_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

}