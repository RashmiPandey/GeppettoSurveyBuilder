package com.geppetto.surveybuilder.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.transaction.Transactional;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

import com.geppetto.surveybuilder.domain.core.GpUser;
import com.geppetto.surveybuilder.domain.core.Items_Dto;
import com.geppetto.surveybuilder.domain.core.Option;
import com.geppetto.surveybuilder.domain.core.Option_Dto;
import com.geppetto.surveybuilder.domain.core.Options_Dto;
import com.geppetto.surveybuilder.domain.core.Question;
import com.geppetto.surveybuilder.domain.core.Question_Dto;
import com.geppetto.surveybuilder.domain.core.Survey;
import com.geppetto.surveybuilder.domain.core.Survey_Dto;

/**
 * 
 * @author Geppetto Generated Code</br> Date Created: </br>
 * @since </br> build: </p>
 *
 *        code was generated by the Geppetto System </br> Gepppetto system
 *        Copyright - Geppetto LLC 2014 - 2015</br> The generated code is free
 *        to use by anyone</p>
 *
 *
 *
 */
@Transactional
@Repository("Survey_Default_ActivityDao")
public class Survey_Dao {

	private Log log = LogFactory.getLog(getClass());

	@Value("${create_survey.sql}")
	private String create_survey_sql;

	@Value("${survey_search_for_update.sql}")
	private String survey_search_for_update_sql;

	@Value("${update_survey.sql}")
	private String update_survey_sql;

	@Value("${delete_survey.sql}")
	private String delete_survey_sql;

	@Value("${get_all_survey.sql}")
	private String get_all_survey_sql;

	@Value("${search_survey.sql}")
	private String search_survey_sql;

	@Value("${get_all_values_by_survey_id.sql}")
	private String get_all_values_by_survey_id_sql;

	@Value("${option.sql}")
	private String get_all_options_by_question_id_sql;

	@Value("${get_all_surveys_by_survey_id.sql}")
	private String get_all_surveys_by_survey_id_sql;

	@Value("${get_a_survey_by_id.sql}")
	private String get_a_survey_by_id_sql;

	@PersistenceContext
	EntityManager entityManager;
	private QuestionDao questiondao;
	private OptionDao optiondao;

	public OptionDao getOptiondao() {
		return optiondao;
	}

	@Resource(name = "OptionDao")
	public void setOptiondao(OptionDao optiondao) {
		this.optiondao = optiondao;
	}

	public QuestionDao getQuestiondao() {
		return questiondao;
	}

	@Resource(name = "QuestionDao")
	public void setQuestiondao(QuestionDao questiondao) {
		this.questiondao = questiondao;
	}

	public ArrayList<Survey_Dto> get_survey_by_id(long Survey_id)
			throws Exception {
		ArrayList<Survey_Dto> survey_dto_result = new ArrayList<Survey_Dto>();
		try {
			System.out.println("we are in ___________");
			Query survey_result = entityManager.createNativeQuery(
					get_a_survey_by_id_sql, Survey.class).setParameter("id",
					Survey_id);

			@SuppressWarnings("unchecked")
			ArrayList<Survey> Survey_list = (ArrayList<Survey>) survey_result
					.getResultList();
			System.out.println("Survey_list size : " + Survey_list.size());
			ArrayList<Question_Dto> Question_list_dto = new ArrayList<Question_Dto>();

			for (Survey survey : Survey_list) {
				long survey_id = survey.getId();
				Query result = entityManager.createNativeQuery(
						get_all_surveys_by_survey_id_sql, Question.class)
						.setParameter("id", survey_id);
				@SuppressWarnings("unchecked")
				ArrayList<Question> Question_list = (ArrayList<Question>) result
						.getResultList();
				System.out.println("Question_list size : "
						+ Question_list.size());

				/*
				 * for (Question question_Desktop : Question_list) {
				 * System.out.println("question_Desktop : " + question_Desktop);
				 * Question_Dto question_dto = new Question_Dto();
				 * question_dto.setTitle(question_Desktop.getDisplay_type());
				 * Question_list_dto.add(question_dto); }
				 */

				for (Question question : Question_list) {
					long question_id = question.getId();
					Query result_options = entityManager.createNativeQuery(
							get_all_options_by_question_id_sql, Option.class)
							.setParameter("id", question_id);
					@SuppressWarnings("unchecked")
					ArrayList<Option> Option_list = (ArrayList<Option>) result_options
							.getResultList();
					System.out.println("Option_list size : "
							+ Option_list.size());

					/*
					 * ArrayList<Option_Dto> option_dto_list = new
					 * ArrayList<Option_Dto>(); for (Option option :
					 * Option_list) { Option_Dto option_dto = new Option_Dto();
					 * option_dto.setName(option.getAnswer());
					 * option_dto_list.add(option_dto); }
					 */
					question.setOptions(Option_list);
					// image url should come
				}
				survey.setQuestion(Question_list);
			}

			// Henrirkh json format conversion.
			for (int i = 0; i < Survey_list.size(); i++) {
				Survey_Dto survey_dt = new Survey_Dto();
				survey_dt.setClient_name(Survey_list.get(i).getClient_name());
				survey_dt.setCountry_name(Survey_list.get(i).getCountry_name());
				survey_dt.setProduct_name(Survey_list.get(i).getProduct_name());
				survey_dt.setId(Survey_list.get(i).getId());
				survey_dt.setStatus(Survey_list.get(i).getStatus());
				survey_dt.setSurvey_description(Survey_list.get(i)
						.getSurvey_description());
				survey_dt.setSurvey_name(Survey_list.get(i).getSurvey_name());
				survey_dt.setSurvey_notes(Survey_list.get(i).getSurvey_notes());
				survey_dt.setClient_id(1);
				survey_dt.setCountry_id(1);
				survey_dt.setProduct_id(1);

				ArrayList<Question_Dto> question_list = new ArrayList<Question_Dto>();
				System.out.println("question size :"
						+ Survey_list.get(i).getQuestion().size());
				for (int j = 0; j < Survey_list.get(i).getQuestion().size(); j++) {
					Question_Dto questions = new Question_Dto();
					questions.setId(1);
					questions.setTitle(Survey_list.get(i).getQuestion().get(j)
							.getThe_question());
					questions.setType_id(1);
					questions.setType_name(Survey_list.get(i).getQuestion()
							.get(j).getDisplay_type());

					ArrayList<Option_Dto> option_list = new ArrayList<Option_Dto>();
					ArrayList<Items_Dto> items_list = new ArrayList<Items_Dto>();
					for (int k = 0; k < Survey_list.get(i).getQuestion().get(j)
							.getOptions().size(); k++) {
						Option_Dto answers = new Option_Dto();
						Items_Dto items = new Items_Dto();
						Options_Dto options = new Options_Dto();

						answers.setName(Survey_list.get(i).getQuestion().get(j)
								.getOptions().get(k).getAnswer());
						items.setUrl(Survey_list.get(i).getQuestion().get(j)
								.getOptions().get(k).getAnswer_image());

						String answerType = Survey_list.get(i).getQuestion()
								.get(j).getOptions().get(k).getAnswer_type();
						if ("OPTION_LABEL".equals(answerType)) {
							option_list.add(answers);
						} else if ("IMAGE_OPTIONS".equals(answerType)) {
							items_list.add(items);
						} else {

						}
						questions.setOptions(options);
						questions.setItems(items_list);
						questions.setAnswers(option_list);
					}
					question_list.add(questions);
					survey_dt.setQuestions(question_list);
				}
				survey_dto_result.add(survey_dt);
			}

			System.out.println("survey_dto_result :	 "
					+ survey_dto_result.size());
			return survey_dto_result;

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
		// return survey_dto_result;

	}

	public String delete_survey_for_desktop(long id, GpUser userTwo)
			throws Exception {
		// public Survey_Dto delete_survey_for_desktop(Survey_Dto request)
		// throws Exception {

		// I need to remove it...
		Survey_Dto request = null;

		try {
			for (int i = 0; i < 1; i++) {
				GpUser user = null;
				this.delete_survey(request.getId(), user);

				for (int j = 0; j < request.getQuestions().size(); j++) {
					System.out.println("question :"
							+ request.getQuestions().get(j));
					this.questiondao.delete_question(request.getQuestions()
							.get(j).getId(), user);

					for (int j2 = 0; j2 < request.getQuestions().get(j)
							.getAnswers().size(); j2++) {
						System.out.println("option: "
								+ request.getQuestions().get(j).getAnswers()
										.get(j2));
						long optionId = request.getQuestions().get(j)
								.getAnswers().get(j2).getId();
						this.optiondao.delete_option(optionId, user);
					}

					for (int j3 = 0; j3 < request.getQuestions().get(j)
							.getItems().size(); j3++) {
						System.out.println("items: "
								+ request.getQuestions().get(j).getItems()
										.get(j3));
						long optionId = request.getQuestions().get(j)
								.getItems().get(j3).getId();
						this.optiondao.delete_option(optionId, user);

					}
				}

			}
			return null;
			// return request;
		} catch (Exception e) {
			new Exception(e.toString());
		}
		return null;

	}

	public Survey_Dto update_survey_for_desktop(Survey_Dto request)
			throws Exception {

		try {
			for (int i = 0; i < 1; i++) {
				// store survey
				Survey survey = new Survey();
				GpUser user = null;
				survey.setId(request.getId());
				survey.setClient_name(request.getClient_name());
				survey.setCountry_name(request.getCountry_name());
				survey.setProduct_name(request.getProduct_name());
				survey.setStatus(request.getStatus());
				survey.setSurvey_description(request.getSurvey_description());
				survey.setSurvey_name(request.getSurvey_name());
				survey.setSurvey_notes(request.getSurvey_notes());
				/**
				 * survey.setClient_id(1); survey.setCountry_id(1);
				 * survey.setProduct_id(1);
				 */
				this.update_survey(survey, user);

				for (int j = 0; j < request.getQuestions().size(); j++) {
					System.out.println("question :"
							+ request.getQuestions().get(j));
					Question question = new Question();
					// here i need survey id// get survey id
					question.setId(request.getQuestions().get(j).getId());
					question.setThe_question(request.getQuestions().get(j)
							.getTitle());
					question.setType_id(request.getQuestions().get(j)
							.getType_id());
					question.setDisplay_type(request.getQuestions().get(j)
							.getType_name());
					question.setSurvey_id(survey.getId());
					this.questiondao.update_question(question, user);

					for (int j2 = 0; j2 < request.getQuestions().get(j)
							.getAnswers().size(); j2++) {
						System.out.println("option: "
								+ request.getQuestions().get(j).getAnswers()
										.get(j2));
						Option option = new Option();

						option.setId(request.getQuestions().get(j).getAnswers()
								.get(j2).getId());
						option.setQuestion_id(question.getId());
						// this should be url
						option.setAnswer_image(request.getQuestions().get(j)
								.getAnswers().get(j2).getName());
						this.optiondao.update_option(option, user);
					}

					for (int j3 = 0; j3 < request.getQuestions().get(j)
							.getItems().size(); j3++) {
						Option option = new Option();
						System.out.println("items: "
								+ request.getQuestions().get(j).getItems()
										.get(j3));

						option.setId(request.getQuestions().get(j).getItems()
								.get(j3).getId());
						option.setQuestion_id(question.getId());
						option.setAnswer(request.getQuestions().get(j)
								.getItems().get(j3).getUrl());
						this.optiondao.update_option(option, user);

					}
				}

			}

			return request;

		} catch (Exception e) {

			new Exception(e.toString());

		}
		return null;

	}

	public Survey_Dto create_survey_for_desktop(Survey_Dto request)
			throws Exception {

		try {
			for (int i = 0; i < 1; i++) {
				// store survey
				Survey survey = new Survey();
				GpUser user = null;
				survey.setClient_name(request.getClient_name());
				survey.setCountry_name(request.getCountry_name());
				survey.setProduct_name(request.getProduct_name());
				survey.setStatus(request.getStatus());
				survey.setSurvey_description(request.getSurvey_description());
				survey.setSurvey_name(request.getSurvey_name());
				survey.setSurvey_notes(request.getSurvey_notes());
				/**
				 * survey.setClient_id(1); survey.setCountry_id(1);
				 * survey.setProduct_id(1);
				 */
				this.create_survey(survey, user);

				// /HERE I NEED LAST INSERTED ID XXXXXXX
				// Retrieving the last inserted index
				String lastIndex = "select last_insert_id()";
				Query sql = entityManager.createNativeQuery(lastIndex);
				BigInteger Id = (BigInteger) sql.getSingleResult();
				survey.setId(Long.valueOf(Id.toString()));

				for (int j = 0; j < request.getQuestions().size(); j++) {
					System.out.println("question :"
							+ request.getQuestions().get(j));
					Question question = new Question();
					// here i need survey id// get survey id
					question.setThe_question(request.getQuestions().get(j)
							.getTitle());
					question.setType_id(request.getQuestions().get(j)
							.getType_id());
					question.setDisplay_type(request.getQuestions().get(j)
							.getType_name());
					question.setSurvey_id(survey.getId());
					this.questiondao.create_question(question, user);

					// /HERE I NEED LAST INSERTED ID XXXXXXX
					// Retrieving the last inserted index
					String getLastInsertedQuestionId = "select last_insert_id()";
					Query getLastInsertedQuestionIdSql = entityManager
							.createNativeQuery(getLastInsertedQuestionId);
					BigInteger questionId = (BigInteger) getLastInsertedQuestionIdSql
							.getSingleResult();
					question.setId(Long.valueOf(questionId.toString()));

					for (int j2 = 0; j2 < request.getQuestions().get(j)
							.getAnswers().size(); j2++) {
						System.out.println("option: "
								+ request.getQuestions().get(j).getAnswers()
										.get(j2));
						Option option = new Option();
						// request.getQuestion_dto().get(j)
						// .getOption_dto().get(j2).getId();
						// request.getQuestion_dto().get(j).getOption_dto().get(j2).getName();

						option.setQuestion_id(question.getId());
						// this should be url
						// option.setAnswer(request.getQuestion_dto().get(j).getOption_dto().get(j2).getName());
						option.setAnswer_image(request.getQuestions().get(j)
								.getAnswers().get(j2).getName());
						// option.setAnswer_image(request.getQuestion_dto().get(j).getItems_dto().get(j2).getUrl());
						this.optiondao.create_option(option, user);
					}

					for (int j3 = 0; j3 < request.getQuestions().get(j)
							.getItems().size(); j3++) {
						Option option = new Option();
						System.out.println("items: "
								+ request.getQuestions().get(j).getItems()
										.get(j3));
						option.setQuestion_id(question.getId());
						option.setAnswer(request.getQuestions().get(j)
								.getItems().get(j3).getUrl());
						this.optiondao.create_option(option, user);

					}
				}

			}

			return request;

		} catch (Exception e) {

			new Exception(e.toString());

		}
		return null;

	}

	public ArrayList<Survey_Dto> get_all_Survey_for_desktop() throws Exception {
		ArrayList<Survey_Dto> survey_dto_result = new ArrayList<Survey_Dto>();
		try {
			System.out.println("we are in ___________");
			Query survey_result = entityManager.createNativeQuery(
					get_all_survey_sql, Survey.class);
			@SuppressWarnings("unchecked")
			ArrayList<Survey> Survey_list = (ArrayList<Survey>) survey_result
					.getResultList();
			System.out.println("Survey_list size : " + Survey_list.size());
			ArrayList<Question_Dto> Question_list_dto = new ArrayList<Question_Dto>();

			for (Survey survey : Survey_list) {
				long survey_id = survey.getId();
				Query result = entityManager.createNativeQuery(
						get_all_surveys_by_survey_id_sql, Question.class)
						.setParameter("id", survey_id);
				@SuppressWarnings("unchecked")
				ArrayList<Question> Question_list = (ArrayList<Question>) result
						.getResultList();
				System.out.println("Question_list size : "
						+ Question_list.size());

				/*
				 * for (Question question_Desktop : Question_list) {
				 * System.out.println("question_Desktop : " + question_Desktop);
				 * Question_Dto question_dto = new Question_Dto();
				 * question_dto.setTitle(question_Desktop.getDisplay_type());
				 * Question_list_dto.add(question_dto); }
				 */

				for (Question question : Question_list) {
					long question_id = question.getId();
					Query result_options = entityManager.createNativeQuery(
							get_all_options_by_question_id_sql, Option.class)
							.setParameter("id", question_id);
					@SuppressWarnings("unchecked")
					ArrayList<Option> Option_list = (ArrayList<Option>) result_options
							.getResultList();
					System.out.println("Option_list size : "
							+ Option_list.size());

					/*
					 * ArrayList<Option_Dto> option_dto_list = new
					 * ArrayList<Option_Dto>(); for (Option option :
					 * Option_list) { Option_Dto option_dto = new Option_Dto();
					 * option_dto.setName(option.getAnswer());
					 * option_dto_list.add(option_dto); }
					 */
					question.setOptions(Option_list);
					// image url should come
				}
				survey.setQuestion(Question_list);
			}

			// Henrirkh json format conversion.
			for (int i = 0; i < Survey_list.size(); i++) {
				Survey_Dto survey_dt = new Survey_Dto();
				survey_dt.setClient_name(Survey_list.get(i).getClient_name());
				survey_dt.setCountry_name(Survey_list.get(i).getCountry_name());
				survey_dt.setProduct_name(Survey_list.get(i).getProduct_name());
				survey_dt.setId(Survey_list.get(i).getId());
				survey_dt.setStatus(Survey_list.get(i).getStatus());
				survey_dt.setSurvey_description(Survey_list.get(i)
						.getSurvey_description());
				survey_dt.setSurvey_name(Survey_list.get(i).getSurvey_name());
				survey_dt.setSurvey_notes(Survey_list.get(i).getSurvey_notes());
				survey_dt.setClient_id(1);
				survey_dt.setCountry_id(1);
				survey_dt.setProduct_id(1);

				ArrayList<Question_Dto> question_list = new ArrayList<Question_Dto>();
				System.out.println("question size :"
						+ Survey_list.get(i).getQuestion().size());
				for (int j = 0; j < Survey_list.get(i).getQuestion().size(); j++) {
					Question_Dto questions = new Question_Dto();
					questions.setId(1);
					questions.setTitle(Survey_list.get(i).getQuestion().get(j)
							.getThe_question());
					questions.setType_id(1);
					questions.setType_name(Survey_list.get(i).getQuestion()
							.get(j).getDisplay_type());

					ArrayList<Option_Dto> option_list = new ArrayList<Option_Dto>();
					ArrayList<Items_Dto> items_list = new ArrayList<Items_Dto>();
					for (int k = 0; k < Survey_list.get(i).getQuestion().get(j)
							.getOptions().size(); k++) {
						Option_Dto answers = new Option_Dto();
						Items_Dto items = new Items_Dto();
						Options_Dto options = new Options_Dto();

						answers.setName(Survey_list.get(i).getQuestion().get(j)
								.getOptions().get(k).getAnswer());
						items.setUrl(Survey_list.get(i).getQuestion().get(j)
								.getOptions().get(k).getAnswer_image());

						String answerType = Survey_list.get(i).getQuestion()
								.get(j).getOptions().get(k).getAnswer_type();
						if ("OPTION_LABEL".equals(answerType)) {
							option_list.add(answers);
						} else if ("IMAGE_OPTIONS".equals(answerType)) {
							items_list.add(items);
						} else {

						}
						questions.setOptions(options);
						questions.setItems(items_list);
						questions.setAnswers(option_list);
					}
					question_list.add(questions);
					survey_dt.setQuestions(question_list);
				}
				survey_dto_result.add(survey_dt);
			}

			System.out.println("survey_dto_result :	 "
					+ survey_dto_result.size());
			return survey_dto_result;

		} catch (Exception e) {
			new Exception(e.toString());
		}
		return survey_dto_result;

	}

	// auths not ready at this time
	public Map<String, Object> get_all_values_by_survey_id(GpUser user)
			throws Exception {

		try {

			Query survey_result = entityManager.createNativeQuery(
					get_all_survey_sql, Survey.class);
			ArrayList<Survey> Survey_list = (ArrayList<Survey>) survey_result
					.getResultList();
			System.out.println("Survey_list size : " + Survey_list.size());

			for (Survey survey : Survey_list) {
				long survey_id = survey.getId();
				Query result = entityManager.createNativeQuery(
						get_all_surveys_by_survey_id_sql, Question.class)
						.setParameter("id", survey_id);
				ArrayList<Question> Question_list = (ArrayList<Question>) result
						.getResultList();
				System.out.println("Question_list size : "
						+ Question_list.size());
				for (Question question : Question_list) {
					long question_id = question.getId();
					Query result_options = entityManager.createNativeQuery(
							get_all_options_by_question_id_sql, Option.class)
							.setParameter("id", question_id);
					ArrayList<Option> Option_list = (ArrayList<Option>) result_options
							.getResultList();
					System.out.println("Option_list size : "
							+ Option_list.size());
					question.setOptions(Option_list);
				}
				survey.setQuestion(Question_list);
			}

			ArrayList<Survey> survey_create = new ArrayList<Survey>();
			ArrayList<Survey> survey_update = new ArrayList<Survey>();
			ArrayList<Survey> survey_delete = new ArrayList<Survey>();
			ArrayList<Survey> survey_sync = new ArrayList<Survey>();
			Map<String, Object> the_map = new HashMap<String, Object>();

			for (Survey survey : Survey_list) {
				if (survey.getStatus().equals("C")) {
					survey_create.add(survey);

				} else if (survey.getStatus().equals("D")) {
					survey_delete.add(survey);

				} else if (survey.getStatus().equals("U")) {
					survey_update.add(survey);

				} else if (survey.getStatus().equals("S")) {
					survey_sync.add(survey);
				}

			}

			the_map.put("create", survey_create);
			the_map.put("update", survey_update);
			the_map.put("delete", survey_delete);
			the_map.put("sync", survey_sync);

			return (Map<String, Object>) the_map;

		} catch (Exception e) {

			new Exception(e.toString());

		}
		return null;

	}

	@SuppressWarnings("unchecked")
	public Survey survey_search_for_update(long id) throws Exception {

		try {

			Survey survey = entityManager.find(Survey.class, id);

			if (survey == null) {
				return survey;
			}
			// fetch survey questions and thier options

			// fetch survey questions
			Query result = entityManager.createNativeQuery(
					get_all_surveys_by_survey_id_sql, Question.class)
					.setParameter("id", survey.getId());

			ArrayList<Question> question_list = (ArrayList<Question>) result
					.getResultList();

			if (question_list != null) {

				// fetch question options
				for (Question question : question_list) {
					Query result_options = entityManager.createNativeQuery(
							get_all_options_by_question_id_sql, Option.class)
							.setParameter("id", question.getId());

					ArrayList<Option> option_list = (ArrayList<Option>) result_options
							.getResultList();

					question.setOptions(option_list);
				}
				survey.setQuestion(question_list);
			}
			return survey;

		} catch (Exception e) {

			new Exception(e.toString()); // this needs to be changed

		}
		return null;

	}

	public Map<String, Object> get_all_survey() throws Exception {

		try {

			Query survey_result = entityManager.createNativeQuery(
					get_all_survey_sql, Survey.class);
			@SuppressWarnings("unchecked")
			ArrayList<Survey> Survey_list = (ArrayList<Survey>) survey_result
					.getResultList();
			System.out.println("Survey_list size : " + Survey_list.size());

			for (Survey survey : Survey_list) {
				long survey_id = survey.getId();
				Query result = entityManager.createNativeQuery(
						get_all_surveys_by_survey_id_sql, Question.class)
						.setParameter("id", survey_id);
				@SuppressWarnings("unchecked")
				ArrayList<Question> Question_list = (ArrayList<Question>) result
						.getResultList();
				System.out.println("Question_list size : "
						+ Question_list.size());
				for (Question question : Question_list) {
					long question_id = question.getId();
					Query result_options = entityManager.createNativeQuery(
							get_all_options_by_question_id_sql, Option.class)
							.setParameter("id", question_id);
					@SuppressWarnings("unchecked")
					ArrayList<Option> Option_list = (ArrayList<Option>) result_options
							.getResultList();
					System.out.println("Option_list size : "
							+ Option_list.size());
					question.setOptions(Option_list);
				}
				survey.setQuestion(Question_list);
			}

			ArrayList<Survey> survey_create = new ArrayList<Survey>();
			ArrayList<Survey> survey_update = new ArrayList<Survey>();
			ArrayList<Survey> survey_delete = new ArrayList<Survey>();
			ArrayList<Survey> survey_sync = new ArrayList<Survey>();
			Map<String, Object> the_map = new HashMap<String, Object>();

			for (Survey survey : Survey_list) {

				if (survey.getStatus() == null) {
					survey.setStatus("C");
				}

				if (survey.getStatus().equals("C")) {
					survey_create.add(survey);

				} else if (survey.getStatus().equals("D")) {
					survey_delete.add(survey);

				} else if (survey.getStatus().equals("U")) {
					survey_update.add(survey);

				} else if (survey.getStatus().equals("S")) {
					survey_sync.add(survey);
				}

			}

			the_map.put("create", survey_create);
			the_map.put("update", survey_update);
			the_map.put("delete", survey_delete);
			the_map.put("sync", survey_sync);

			System.out.println("the map : " + the_map.size());

			return (Map<String, Object>) the_map;

		} catch (Exception e) {

			e.printStackTrace();
			throw new Exception(e.getMessage());
		}

	}

	@SuppressWarnings("unchecked")
	public List<Survey> get_all_survey_new() throws Exception {

		try {
			// fetch all survey
			Query survey_result = entityManager.createNativeQuery(
					get_all_survey_sql, Survey.class);

			List<Survey> survey_list = (List<Survey>) survey_result
					.getResultList();

			if (survey_list == null) {
				return survey_list;
			}
			// fetch survey questions and thier options
			for (Survey survey : survey_list) {

				// fetch survey questions
				Query result = entityManager.createNativeQuery(
						get_all_surveys_by_survey_id_sql, Question.class)
						.setParameter("id", survey.getId());

				ArrayList<Question> question_list = (ArrayList<Question>) result
						.getResultList();

				if (question_list != null) {

					// fetch question options
					for (Question question : question_list) {
						Query result_options = entityManager.createNativeQuery(
								get_all_options_by_question_id_sql,
								Option.class).setParameter("id",
								question.getId());

						ArrayList<Option> option_list = (ArrayList<Option>) result_options
								.getResultList();

						question.setOptions(option_list);
					}
					survey.setQuestion(question_list);
				}
			}

			return survey_list;

		} catch (Exception e) {

			e.printStackTrace();
			throw new Exception(e.getMessage());
		}

	}

	public ArrayList<Survey> search_survey(String Survey_name,
			String Survey_description, String Survey_notes, String Client_name,
			String Product_name, String Country_name) throws Exception {

		try {

			Query result = entityManager
					.createNativeQuery(search_survey_sql, Survey.class)

					.setParameter("survey_name", Survey_name.concat("%"))
					.setParameter("survey_description",
							Survey_description.concat("%"))
					.setParameter("survey_notes", Survey_notes.concat("%"))
					.setParameter("client_name", Client_name.concat("%"))
					.setParameter("product_name", Product_name.concat("%"))
					.setParameter("country_name", Country_name.concat("%"));

			ArrayList<Survey> Survey_list = (ArrayList<Survey>) result
					.getResultList();

			if (Survey_list == null) {
				throw new Exception("null");
			}

			return (ArrayList<Survey>) Survey_list;

		} catch (Exception e) {

			new Exception(e.toString()); // this needs to be changed

		}
		return null;

	}

	@Transactional
	public Survey create_survey(Survey Survey, GpUser user) throws Exception {

		try {
			Query query = entityManager
					.createNativeQuery(create_survey_sql)
					.setParameter("survey_name", Survey.getSurvey_name())
					.setParameter("survey_description",
							Survey.getSurvey_description())
					.setParameter("survey_notes", Survey.getSurvey_notes())
					.setParameter("client_id", Survey.getClient_Id())
					.setParameter("client_name", Survey.getClient_name())
					.setParameter("product_id", Survey.getProduct_Id())
					.setParameter("product_name", Survey.getProduct_name())
					.setParameter("country_id", Survey.getCountry_Id())
					.setParameter("country_name", Survey.getCountry_name())
					.setParameter("status", Survey.getStatus());
			query.executeUpdate();

			String lastIndex = "select last_insert_id()";
			Query sql = entityManager.createNativeQuery(lastIndex);
			BigInteger Id = (BigInteger) sql.getSingleResult();
			Survey.setId(Long.valueOf(Id.toString()));

			return Survey;

		} catch (Exception e) {

			System.out.println("DAOException: " + e.toString());

		}
		return null;

	}

	@Transactional
	public Survey update_survey(Survey Survey, GpUser user) throws Exception {

		try {
			Query query = entityManager
					.createNativeQuery(update_survey_sql)
					.setParameter("id", Survey.getId())
					.setParameter("survey_name", Survey.getSurvey_name())
					.setParameter("survey_description",
							Survey.getSurvey_description())
					.setParameter("survey_notes", Survey.getSurvey_notes())
					.setParameter("client_name", Survey.getClient_name())
					.setParameter("product_name", Survey.getProduct_name())
					.setParameter("country_name", Survey.getCountry_name())
					.setParameter("client_id", 1).setParameter("product_id", 1)
					.setParameter("country_id", 1)
					.setParameter("status", Survey.getStatus());
			query.executeUpdate();

			return Survey;

		} catch (Exception e) {

			System.out.println("DAOException: " + e.toString());

		}
		return null;

	}

	@Transactional
	public String delete_survey(long id, GpUser user) throws Exception {

		try {
			Query query = entityManager.createNativeQuery(delete_survey_sql)
					.setParameter("id", id);

			query.executeUpdate();

			return "{\"status\":\"success\"}";

		} catch (Exception e) {

			System.out.println("DAOException: " + e.toString());

		}
		return null;

	}

	@Transactional
	public List<Survey> get_surveys() throws Exception {

		try {
			Query query = entityManager.createNativeQuery(get_all_survey_sql,
					Survey.class);

			List<Survey> survey_list = (List<Survey>) query.getResultList();

			if (survey_list.size() < 1) {
				throw new Exception("no Client found");
			}

			return (List<Survey>) survey_list;

		} catch (Exception e) {

			System.out.println("DAOException: " + e.toString());

		}
		return null;

	}

	public ArrayList<Survey> get_all_survey_table() throws Exception {

		try {

			Query survey_result = entityManager.createNativeQuery(
					get_all_survey_sql, Survey.class);
			@SuppressWarnings("unchecked")
			ArrayList<Survey> Survey_list = (ArrayList<Survey>) survey_result
					.getResultList();
			System.out.println("Survey_list size : " + Survey_list.size());
			return (ArrayList<Survey>) Survey_list;
		} catch (Exception e) {

		}
		return null;
	}
}