package com.geppetto.surveybuilder.mysql;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

import com.geppetto.surveybuilder.domain.core.Country;
import com.geppetto.surveybuilder.domain.core.GpUser;


/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("CountryDao")
public class CountryDao   {

	private Log log = LogFactory.getLog(getClass());

	@Value("${country_search_for_update.sql}")
	private String country_search_for_update_sql;
	@Value("${update_country.sql}")
	private String update_country_sql;
	@Value("${delete_country.sql}")
	private String delete_country_sql;
	@Value("${create_country.sql}")
	private String create_country_sql;
	@Value("${search_country.sql}")
	private String search_country_sql;
	@Value("${search_all_country.sql}")
	private String search_all_country_sql;
	
    @PersistenceContext
	EntityManager entityManager;


	//auths not ready at this time
	public Country country_search_for_update(long id, GpUser user) throws Exception {


		try {

			Query result = entityManager.createNativeQuery(
					country_search_for_update_sql, Country.class)

			.setParameter("id", id);
			ArrayList<Country> Country_list = (ArrayList<Country>) result.getResultList();

			if (Country_list == null) {
				throw new Exception("no Country found");
			}

			return (Country) Country_list.get(0);

		} catch (Exception e) {

			new Exception(e.toString()); // this needs to be changed

		}
		return null;

	}
	
	//auths not ready at this time
		public ArrayList<Country> search_all_country() throws Exception {


			try{

				Query result =  entityManager.
				createNativeQuery(search_all_country_sql,Country.class);

				ArrayList<Country> Country_list =	(ArrayList<Country>)result.getResultList();

				if(Country_list  == null){
					throw new Exception("null");
				}

				return (ArrayList<Country>) Country_list;

			}catch(Exception e){

				new Exception(e.toString());  // this needs to be changed 

			}
			return null;


		}

	//auths not ready at this time
	public ArrayList<Country> search_country(String  Common_name, String  Formal_name, String  Iso_three_letter_code, String  Capital, String  Currency_name, String  Telephone_code) throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(search_country_sql,Country.class)

			.setParameter("common_name", Common_name.concat("%"))
			.setParameter("formal_name", Formal_name.concat("%"))
			.setParameter("iso_three_letter_code", Iso_three_letter_code.concat("%"))
			.setParameter("capital", Capital.concat("%"))
			.setParameter("currency_name", Currency_name.concat("%"))
			.setParameter("telephone_code", Telephone_code.concat("%"));

			ArrayList<Country> Country_list =	(ArrayList<Country>)result.getResultList();

			if(Country_list  == null){
				throw new Exception("null");
			}

			return (ArrayList<Country>) Country_list;

		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed 

		}
		return null;


	}



	//auths not ready at this time
	@Transactional
	public Country update_country(Country Country, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(update_country_sql)
			.setParameter("id", Country.getId())
			.setParameter("common_name", Country.getCommon_name())
			.setParameter("formal_name", Country.getFormal_name())
			.setParameter("iso_three_letter_code", Country.getIso_three_letter_code())
			.setParameter("capital", Country.getCapital())
			.setParameter("currency_name", Country.getCurrency_name())
			.setParameter("telephone_code", Country.getTelephone_code());

			query.executeUpdate();

			return Country;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString()); 

		}
		return null;


	}

	//auths not ready at this time
	@Transactional
	public String  delete_country(long id, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(delete_country_sql)
			.setParameter("id", id);

			query.executeUpdate();

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString()); 

		}
		return null;


	}

	//auths not ready at this time
	@Transactional
	public Country create_country(Country Country, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(create_country_sql)
			.setParameter("common_name", Country.getCommon_name())
			.setParameter("formal_name", Country.getFormal_name())
			.setParameter("iso_three_letter_code", Country.getIso_three_letter_code())
			.setParameter("capital", Country.getCapital())
			.setParameter("currency_name", Country.getCurrency_name())
			.setParameter("telephone_code", Country.getTelephone_code());

			query.executeUpdate();

			return Country;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString()); 

		}
		return null;


	}



}