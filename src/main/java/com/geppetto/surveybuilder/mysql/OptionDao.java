package com.geppetto.surveybuilder.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;
import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

import com.geppetto.surveybuilder.domain.core.GpUser;
import com.geppetto.surveybuilder.domain.core.Option;
import com.geppetto.surveybuilder.domain.core.Question;

/**
 * 
 * @author Geppetto Generated Code</br> Date Created: </br>
 * @since </br> build: </p>
 *
 *        code was generated by the Geppetto System </br> Gepppetto system
 *        Copyright - Geppetto LLC 2014 - 2015</br> The generated code is free
 *        to use by anyone</p>
 *
 *
 *
 */

@Repository("OptionDao")
public class OptionDao {

	private Log log = LogFactory.getLog(getClass());

	@Value("${create_option.sql}")
	private String create_option_sql;
	@Value("${delete_option.sql}")
	private String delete_option_sql;
	@Value("${option_search_for_update.sql}")
	private String option_search_for_update_sql;
	@Value("${update_option.sql}")
	private String update_option_sql;
	@Value("${search_option.sql}")
	private String search_option_sql;
	@Value("${option.sql}")
	private String option_sql;

	@PersistenceContext
	EntityManager entityManager;

	// auths not ready at this time
	public Option option_search_for_update(long id) throws Exception {

		try {
			System.out.println("id : " + id);

			Query result = entityManager.createNativeQuery(
					option_search_for_update_sql, Option.class).setParameter(
					"id", id);

			System.out.println("option_search_for_update_sql  ::: "
					+ option_search_for_update_sql);

			ArrayList<Option> Option_list = (ArrayList<Option>) result
					.getResultList();

			if (Option_list == null) {
				throw new Exception("no Option found");
			}

			return (Option) Option_list.get(0);

		} catch (Exception e) {

			new Exception(e.toString()); // this needs to be changed

		}
		return null;

	}

	// auths not ready at this time
	public ArrayList<Option> search_option(String Question_id, String Answer,
			String Answer_image, String Answer_type) throws Exception {

		try {

			Query result = entityManager
					.createNativeQuery(search_option_sql, Option.class)

					.setParameter("question_id", Question_id.concat("%"))
					.setParameter("answer", Answer.concat("%"))
					.setParameter("answer_image", Answer_image.concat("%"))
					.setParameter("answer_type", Answer_type.concat("%"));

			ArrayList<Option> Option_list = (ArrayList<Option>) result
					.getResultList();

			if (Option_list == null) {
				throw new Exception("null");
			}

			return (ArrayList<Option>) Option_list;

		} catch (Exception e) {

			new Exception(e.toString()); // this needs to be changed

		}
		return null;

	}

	// auths not ready at this time
	@Transactional
	public Option create_option(Option Option, GpUser user) throws Exception {

		try {
			Query query = entityManager.createNativeQuery(create_option_sql)
					.setParameter("question_id", Option.getQuestion_id())
					.setParameter("answer", Option.getAnswer())
					.setParameter("answer_image", Option.getAnswer_image())
					.setParameter("answer_type", Option.getAnswer_type())
					.setParameter("slider_value", Option.getSlider_value())
					.setParameter("slider_min", Option.getSlider_min())
					.setParameter("slider_max", Option.getSlider_max());
			query.executeUpdate();

			String lastIndex = "select last_insert_id()";
			Query sql = entityManager.createNativeQuery(lastIndex);
			BigInteger Id = (BigInteger) sql.getSingleResult();
			Option.setId(Long.valueOf(Id.toString()));

			return Option;

		} catch (Exception e) {

			System.out.println("DAOException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	@Transactional
	public String delete_option(long id, GpUser user) throws Exception {

		try {
			Query query = entityManager.createNativeQuery(delete_option_sql)
					.setParameter("id", id);

			query.executeUpdate();

			return "{\"status\":\"success\"}";

		} catch (Exception e) {

			System.out.println("DAOException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	@Transactional
	public Option update_option(Option Option, GpUser user) throws Exception {

		try {
			Query query = entityManager.createNativeQuery(update_option_sql)
					.setParameter("id", Option.getId())
					.setParameter("question_id", Option.getQuestion_id())
					.setParameter("answer", Option.getAnswer())
					.setParameter("answer_image", Option.getAnswer_image())
					.setParameter("answer_type", Option.getAnswer_type())
					.setParameter("slider_value", Option.getSlider_value())
					.setParameter("slider_min", Option.getSlider_min())
					.setParameter("slider_max", Option.getSlider_max());

			query.executeUpdate();

			return Option;

		} catch (Exception e) {

			System.out.println("DAOException: " + e.toString());

		}
		return null;

	}

	@Transactional
	public ArrayList<Option> get_option_by_question_id(long id)
			throws Exception {

		try {

			Query result = entityManager.createNativeQuery(option_sql,
					Option.class)

			.setParameter("id", id);

			ArrayList<Option> Option_list = (ArrayList<Option>) result.getResultList();

			if (Option_list == null) {
				throw new Exception("null");
			}

			return (ArrayList<Option>) Option_list;

		} catch (Exception e) {

			new Exception(e.toString()); // this needs to be changed

		}
		return null;
	}
}