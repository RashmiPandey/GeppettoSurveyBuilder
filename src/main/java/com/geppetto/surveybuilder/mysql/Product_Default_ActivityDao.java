package com.geppetto.surveybuilder.mysql;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

import com.geppetto.surveybuilder.domain.core.GpUser;
import com.geppetto.surveybuilder.domain.core.Product;


/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Repository("Product_Default_ActivityDao")
public class Product_Default_ActivityDao   {

	private Log log = LogFactory.getLog(getClass());

	@Value("${create_product.sql}")
	private String create_product_sql;
	@Value("${product_search_for_update.sql}")
	private String product_search_for_update_sql;
	@Value("${update_product.sql}")
	private String update_product_sql;
	@Value("${delete_product.sql}")
	private String delete_product_sql;
	@Value("${get_all_product.sql}")
	private String get_all_product_sql;
	
	@Value("${get_product_by_client_id.sql}")
	private String get_product_by_client_id_sql;


    @PersistenceContext
	EntityManager entityManager;


	//auths not ready at this time
	public Product product_search_for_update(long id, GpUser user) throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(product_search_for_update_sql,Product.class)

			.setParameter("id", id);;

			ArrayList<Product> Product_list =	(ArrayList<Product>)result.getResultList();

			if(Product_list  == null){
				throw new Exception("no Product found");
			}

			return (Product) Product_list.get(0);

		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed 

		}
		return null;


	}

	//auths not ready at this time
	public ArrayList<Product> get_all_product() throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(get_all_product_sql,Product.class);

			ArrayList<Product> Product_list =	(ArrayList<Product>)result.getResultList();

			if(Product_list .size() < 1){
				throw new Exception("no Product found");
			}

			return (ArrayList<Product>) Product_list;

		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed 

		}
		return null;


	}
	
	
	
	public ArrayList<Product> get_product_by_client_id(long id) throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(get_product_by_client_id_sql,Product.class)
			.setParameter("id", id);

			ArrayList<Product> Product_list =	(ArrayList<Product>)result.getResultList();

			if(Product_list .size() < 1){
				throw new Exception("no Product found");
			}

			return (ArrayList<Product>) Product_list;

		}catch(Exception e){
			System.out.println("DaoException: " + e.toString());

		}
		return null;


	}



	//auths not ready at this time
	@Transactional
	public Product create_product(Product Product, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(create_product_sql)
			.setParameter("Product_name", Product.getProduct_name())
			.setParameter("Product_notes", Product.getProduct_notes())
			.setParameter("Created_by", Product.getCreated_by())
			.setParameter("Created_date", Product.getCreated_date())
			.setParameter("Modified_by", Product.getModified_by())
			.setParameter("Modified_date", Product.getModified_date())
			.setParameter("client_id", Product.getClient_id());

			query.executeUpdate();

			return Product;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString()); 

		}
		return null;


	}

	//auths not ready at this time
	@Transactional
	public Product update_product(Product Product, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(update_product_sql)
			.setParameter("Id", Product.getId())
			.setParameter("Product_name", Product.getProduct_name())
			.setParameter("Product_notes", Product.getProduct_notes())
			.setParameter("Created_by", Product.getCreated_by())
			.setParameter("Created_date", Product.getCreated_date())
			.setParameter("Modified_by", Product.getModified_by())
			.setParameter("Modified_date", Product.getModified_date())
			.setParameter("client_id", Product.getClient_id());

			query.executeUpdate();

			return Product;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString()); 

		}
		return null;


	}

	//auths not ready at this time
	@Transactional
	public String  delete_product(long id, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(delete_product_sql)
			.setParameter("Id", id);

			query.executeUpdate();

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString()); 

		}
		return null;


	}



}