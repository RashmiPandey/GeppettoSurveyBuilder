package com.geppetto.surveybuilder.controller;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.geppetto.surveybuilder.domain.core.Question;
import com.geppetto.surveybuilder.domain.core.QuestionTypes;
import com.geppetto.surveybuilder.service.QuestionService;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;






/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/Question", description = "Question of Question", 
produces = "application/json")

@Controller("QuestionController")
@RequestMapping("/Question")
public class QuestionController extends GpBaseController {


	QuestionService Question_service;


	public QuestionService get_Question_service() {
		return Question_service;
	}


	@Resource(name="QuestionService")
	public void set_Question_service(QuestionService Question_service) {
		this.Question_service = Question_service;
	}
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_all_question_types", httpMethod = "GET", notes = "updates a noun of Question", response = Question.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_all_question_types", headers = "Accept=application/json")
	@ResponseBody
	public ArrayList<QuestionTypes> get_all_question_types() throws Exception {

		System.out.println("controller");
		ArrayList<QuestionTypes> Question_list = new ArrayList<QuestionTypes>();
		Question_list = Question_service.get_all_question_types(super.getUser());
		return Question_list;

	}
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_all_surveys", httpMethod = "GET", notes = "updates a noun of Question", response = Question.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_all_surveys", headers = "Accept=application/json")
	@ResponseBody
	public Map<String, Object> get_all_values_by_survey_id() throws Exception {

		System.out.println("controller");
		Map<String, Object> Question_list = new HashMap<String, Object>();
		Question_list = Question_service.get_all_values_by_survey_id(super.getUser());
		return Question_list;

	}

	//auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/create_Question", httpMethod = "POST",
	notes = "creates a noun of Question", 
	response = Question.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.POST, value = "/create_Question", headers="Accept=application/json")
    @ResponseBody
	public Question create_Question(@RequestBody Question the_Question) throws Exception {

		Question a_Question;

		a_Question = Question_service.create_question(the_Question, super.getUser());

		return a_Question;

	}

	//auths not ready at this time

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/delete_Question/{Question_id}", httpMethod = "DELETE",
	notes = "deletes a noun of Question", 
	response = Question.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.DELETE, value = "/delete_Question/{Question_id}", headers="Accept=application/json")
    @ResponseBody
	public String  delete_Question(@PathVariable("Question_id")long Question_id) throws Exception {

		String service_return_msg = "";

		service_return_msg = Question_service.delete_question(Question_id, super.getUser());

		return service_return_msg;

	}

	//auths not ready at this time
	@CrossOrigin(origins = "*")

	@ApiOperation(value = "/search_for_update_Question/{Question_id}", httpMethod = "GET",
	notes = "updates a noun of Question", 
	response = Question.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET, value = "/search_for_update_Question/{Question_id}", headers="Accept=application/json")
    @ResponseBody
	public Question search_for_update_Question(@PathVariable("Question_id")long Question_id) throws Exception {

		Question the_Question = new Question();

		the_Question = Question_service.question_search_for_update(Question_id, super.getUser());

		return the_Question;

	}

	//auths not ready at this time

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/update_Question", httpMethod = "PUT",
	notes = "updates a noun of Question", 
	response = Question.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.PUT, value = "/update_Question", headers="Accept=application/json")
    @ResponseBody
	public Question update_Question(@RequestBody Question the_Question) throws Exception {

		Question a_Question;

		a_Question = Question_service.update_question(the_Question, super.getUser());

		return a_Question;

	}

	//auths not ready at this time

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/search_Question", httpMethod = "GET",
	notes = "searches a noun of Question", 
	response = Question.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET, value = "/search_Question", headers="Accept=application/json")
    @ResponseBody
	public ArrayList<Question> search_Question(@RequestParam(required = false, value = "The_question", defaultValue = "%%") String The_question,@RequestParam(required = false, value = "Display_type", defaultValue = "%%") String Display_type,@RequestParam(required = false, value = "Answer_id", defaultValue = "%%") String Answer_id,@RequestParam(required = false, value = "Order_in_survey", defaultValue = "%%") String Order_in_survey,@RequestParam(required = false, value = "Group_name", defaultValue = "%%") String Group_name,@RequestParam(required = false, value = "Group_id", defaultValue = "%%") String Group_id,@RequestParam(required = false, value = "Rank_importance", defaultValue = "%%") String Rank_importance,@RequestParam(required = false, value = "Created_by", defaultValue = "%%") String Created_by,@RequestParam(required = false, value = "Created_date", defaultValue = "%%") String Created_date,@RequestParam(required = false, value = "Updated_by", defaultValue = "%%") String Updated_by,@RequestParam(required = false, value = "Updated_date", defaultValue = "%%") String Updated_date,@RequestParam(required = false, value = "Survey_id", defaultValue = "%%") String Survey_id) throws Exception {

		ArrayList<Question> Question_list = new ArrayList<Question>();

		Question_list = Question_service.search_question(The_question,Display_type,Answer_id,Order_in_survey,Group_name,Group_id,Rank_importance,Created_by,Created_date,Updated_by,Updated_date,Survey_id);

		return Question_list;

	}
	
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_all_question_by_survey_id/{survey_id}", httpMethod = "GET",
	notes = "get_all_question_by_survey_id", 
	response = Question.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET, value = "/get_all_question_by_survey_id/{survey_id}", headers="Accept=application/json")
    @ResponseBody
	public ArrayList<Question> get_all_question_by_survey_id(@PathVariable("survey_id")long survey_id) throws Exception {

		ArrayList<Question> Question_list = new ArrayList<Question>();

		Question_list = Question_service.get_all_question_by_survey_id(survey_id);

		return Question_list;

	}




}