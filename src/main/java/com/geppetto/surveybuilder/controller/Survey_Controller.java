package com.geppetto.surveybuilder.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.geppetto.surveybuilder.domain.core.Option;
import com.geppetto.surveybuilder.domain.core.Question;
import com.geppetto.surveybuilder.domain.core.Servey_result;
import com.geppetto.surveybuilder.domain.core.Survey;
import com.geppetto.surveybuilder.domain.core.Survey_Dto;
import com.geppetto.surveybuilder.domain.core.User;
import com.geppetto.surveybuilder.dto.EntityToDTO;
import com.geppetto.surveybuilder.dto.SurveyDTO;
import com.geppetto.surveybuilder.service.OptionService;
import com.geppetto.surveybuilder.service.QuestionService;
import com.geppetto.surveybuilder.service.Servey_result_Service;
import com.geppetto.surveybuilder.service.SignUpServiceimpl;
import com.geppetto.surveybuilder.service.Survey_Service;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

/**
 * 
 * @author Geppetto Generated Code</br> Date Created: </br>
 * @since </br> build: </p>
 *
 *        code was generated by the Geppetto System </br> Gepppetto system
 *        Copyright - Geppetto LLC 2014 - 2015</br> The generated code is free
 *        to use by anyone</p>
 *
 *
 *
 */

@Api(value = "/Survey_Default_Activity", description = "Survey_Default_Activity of Survey_Default_Activity", produces = "application/json")
@Controller("Survey_Default_ActivityController")
@RequestMapping("/Survey_Default_Activity")
public class Survey_Controller extends GpBaseController {

	Survey_Service Survey_Default_Activity_service;

	Servey_result_Service Servey_result_Default_Activity_service;

	QuestionService Question_service;

	OptionService Option_service;

	@Autowired
	private SignUpServiceimpl signUpService;

	public QuestionService get_Question_service() {
		return Question_service;
	}

	@Resource(name = "QuestionService")
	public void set_Question_service(QuestionService Question_service) {
		this.Question_service = Question_service;
	}

	public Survey_Service get_Survey_Default_Activity_service() {
		return Survey_Default_Activity_service;
	}

	@Resource(name = "Survey_Default_ActivityService")
	public void set_Survey_Default_Activity_service(
			Survey_Service Survey_Default_Activity_service) {
		this.Survey_Default_Activity_service = Survey_Default_Activity_service;
	}

	public OptionService get_Option_service() {
		return Option_service;
	}

	@Resource(name = "OptionService")
	public void set_Option_service(OptionService Option_service) {
		this.Option_service = Option_service;
	}

	public Servey_result_Service get_Servey_result_Default_Activity_service() {
		return Servey_result_Default_Activity_service;
	}

	@Resource(name = "Servey_result_Default_ActivityService")
	public void set_Servey_result_Default_Activity_service(
			Servey_result_Service Servey_result_Default_Activity_service) {
		this.Servey_result_Default_Activity_service = Servey_result_Default_Activity_service;
	}

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_survey_by_id/{Survey_id}", httpMethod = "GET", notes = "special search that gets all values of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_survey_by_id/{Survey_id}", headers = "Accept=application/json")
	@ResponseBody
	public ArrayList<Survey_Dto> get_survey_by_id(
			@PathVariable("Survey_id") long Survey_id) throws Exception {

		ArrayList<Survey_Dto> Survey_list = new ArrayList<Survey_Dto>();

		Survey_list = Survey_Default_Activity_service
				.get_survey_by_id(Survey_id);

		return Survey_list;

	}

	@RequestMapping(method = RequestMethod.DELETE, value = "/delete_survey_for_desktop/{Survey_id}", headers = "Accept=application/json")
	@ResponseBody
	public String delete_survey_for_desktop(
			@PathVariable("Survey_id") long Survey_id) throws Exception {

		String service_return_msg = "";

		service_return_msg = Survey_Default_Activity_service
				.delete_survey_for_desktop(Survey_id, super.getUser());

		return service_return_msg;

	}

	@RequestMapping(method = RequestMethod.POST, value = "/update_survey_for_desktop", headers = "Accept=application/json")
	@ResponseBody
	public Survey_Dto update_survey_for_desktop(@RequestBody Survey_Dto request)
			throws Exception {

		Survey_Dto Survey_list = new Survey_Dto();
		System.out.println("request : " + request.toString());

		Survey_list = Survey_Default_Activity_service
				.update_survey_for_desktop(request);

		return Survey_list;

	}

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_all_Survey_for_desktop", httpMethod = "GET", notes = "special search that gets all values of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_all_Survey_for_desktop", headers = "Accept=application/json")
	@ResponseBody
	public ArrayList<Survey_Dto> get_all_Survey_for_desktop() throws Exception {

		ArrayList<Survey_Dto> Survey_list = new ArrayList<Survey_Dto>();

		Survey_list = Survey_Default_Activity_service
				.get_all_Survey_for_desktop();

		return Survey_list;

	}

	@CrossOrigin(origins = "*")
	@RequestMapping(method = RequestMethod.POST, value = "/create_survey_for_desktop", headers = "Accept=application/json")
	@ResponseBody
	public Survey_Dto create_survey_for_desktop(@RequestBody Survey_Dto request)
			throws Exception {

		Survey_Dto Survey_list = new Survey_Dto();
		System.out.println("request : " + request.toString());

		Survey_list = Survey_Default_Activity_service
				.create_survey_for_desktop(request);

		return Survey_list;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/create_Survey", httpMethod = "POST", notes = "creates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.POST, value = "/create_Survey", headers = "Accept=application/json")
	@ResponseBody
	public Survey create_Survey(@RequestBody Survey the_Survey)
			throws Exception {

		Survey a_Survey;

		a_Survey = Survey_Default_Activity_service.create_survey(the_Survey,
				super.getUser());

		return a_Survey;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/search_for_update_Survey/{Survey_id}", httpMethod = "GET", notes = "updates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/search_for_update_Survey/{Survey_id}", headers = "Accept=application/json")
	@ResponseBody
	public Survey search_for_update_Survey(
			@PathVariable("Survey_id") long Survey_id) throws Exception {

		Survey the_Survey = new Survey();

		the_Survey = Survey_Default_Activity_service
				.survey_search_for_update(Survey_id);

		return the_Survey;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/update_Survey", httpMethod = "PUT", notes = "updates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.PUT, value = "/update_Survey", headers = "Accept=application/json")
	@ResponseBody
	public Survey update_Survey(@RequestBody Survey the_Survey)
			throws Exception {

		Survey a_Survey;

		a_Survey = Survey_Default_Activity_service.update_survey(the_Survey,
				super.getUser());

		return a_Survey;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/delete_Survey/{Survey_id}", httpMethod = "DELETE", notes = "deletes a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.DELETE, value = "/delete_Survey/{Survey_id}", headers = "Accept=application/json")
	@ResponseBody
	public String delete_Survey(@PathVariable("Survey_id") long Survey_id)
			throws Exception {

		String service_return_msg = "";

		service_return_msg = Survey_Default_Activity_service.delete_survey(
				Survey_id, super.getUser());

		return service_return_msg;

	}

	// auths not ready at this time

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_all_Survey", httpMethod = "GET", notes = "special search that gets all values of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_all_Survey", headers = "Accept=application/json")
	@ResponseBody
	public Map<String, Object> get_all_Survey() throws Exception {

		Map<String, Object> Survey_list = new HashMap<String, Object>();

		Survey_list = Survey_Default_Activity_service.get_all_survey();

		return Survey_list;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/search_Survey", httpMethod = "GET", notes = "searches a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/search_Survey", headers = "Accept=application/json")
	@ResponseBody
	public ArrayList<Survey> search_Survey(
			@RequestParam(required = false, value = "Survey_name", defaultValue = "%%") String Survey_name,
			@RequestParam(required = false, value = "Survey_description", defaultValue = "%%") String Survey_description,
			@RequestParam(required = false, value = "Survey_notes", defaultValue = "%%") String Survey_notes,
			@RequestParam(required = false, value = "Client_name", defaultValue = "%%") String Client_name,
			@RequestParam(required = false, value = "Product_name", defaultValue = "%%") String Product_name,
			@RequestParam(required = false, value = "Country_name", defaultValue = "%%") String Country_name)
			throws Exception {

		ArrayList<Survey> Survey_list = new ArrayList<Survey>();

		Survey_list = Survey_Default_Activity_service.search_survey(
				Survey_name, Survey_description, Survey_notes, Client_name,
				Product_name, Country_name);

		return Survey_list;

	}

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_Survey/{survey_id}", httpMethod = "GET", notes = "updates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_Survey/{survey_id}", headers = "Accept=application/json")
	@ResponseBody
	public Survey get_Survey(@PathVariable("survey_id") long survey_id)
			throws Exception {

		Survey the_Survey = Survey_Default_Activity_service
				.survey_search_for_update(survey_id);

		return the_Survey;

	}

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/survey_result/{survey_id}", httpMethod = "GET", notes = "updates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/survey_result/{survey_id}", headers = "Accept=application/json")
	@ResponseBody
	public Survey survey_result(@PathVariable("survey_id") long survey_id)
			throws Exception {

		// get survey
		Survey the_Survey = Survey_Default_Activity_service
				.survey_search_for_update(survey_id);

		if (the_Survey != null) {

			// get survey question
			List<Question> question_list = this.Question_service
					.get_question_by_survey_id(survey_id);

			if (question_list != null) {

				for (Question question : question_list) {

					// get survey question result
					List<Servey_result> survey_result = this.Servey_result_Default_Activity_service
							.get_servey_result_by_question_and_survey_id(
									question.getId(), survey_id);

					if (survey_result != null) {

						for (Servey_result servey_result : survey_result) {

							if (servey_result.getOption_id() != null) {

								// get option

								Option option_result = this.Option_service
										.option_search_for_update(servey_result
												.getOption_id());
								servey_result.setOption(option_result);

							}
							// get user

							if (servey_result.getUser_id() != null) {

								User user = this.signUpService
										.search(servey_result.getUser_id());

								servey_result.setUser(user);

							}

						}

					}

					question.setSurvey_result(survey_result);

				}
			}

			the_Survey.setQuestion(question_list);
		}
		return the_Survey;

	}

	/*
	 * @CrossOrigin(origins = "*")
	 * 
	 * @ApiOperation(value = "/survey_result/{survey_id}", httpMethod = "GET",
	 * notes = "updates a noun of Survey", response = Survey.class)
	 * 
	 * @ApiResponses(value = {
	 * 
	 * @ApiResponse(code = 200, message = "The request was fulfilled"),
	 * 
	 * @ApiResponse(code = 404, message =
	 * "The server has not found anything matching the URI given"),
	 * 
	 * @ApiResponse(code = 500, message =
	 * "Internal server error due to encoding the data"),
	 * 
	 * @ApiResponse(code = 400, message =
	 * "Bad request due to decoding the data"),
	 * 
	 * @ApiResponse(code = 412, message =
	 * "Pre condition failed due to required data not found") })
	 * 
	 * @RequestMapping(method = RequestMethod.GET, value =
	 * "/survey_result/{survey_id}", headers = "Accept=application/json")
	 * 
	 * @ResponseBody public Survey survey_result(@PathVariable("survey_id") long
	 * survey_id) throws Exception {
	 * 
	 * // get survey Survey the_Survey = Survey_Default_Activity_service
	 * .survey_search_for_update(survey_id);
	 * 
	 * if (the_Survey != null) {
	 * 
	 * // get survey question List<Question> question_list =
	 * this.Question_service .get_question_by_survey_id(survey_id);
	 * 
	 * if (question_list != null) {
	 * 
	 * for (Question question : question_list) {
	 * 
	 * // get survey question result List<Servey_result> survey_result =
	 * this.Servey_result_Default_Activity_service
	 * .get_servey_result_by_question_and_survey_id( question.getId(),
	 * survey_id);
	 * 
	 * if (survey_result != null) {
	 * 
	 * for (Servey_result servey_result : survey_result) {
	 * 
	 * // get option
	 * 
	 * Option option_result =
	 * this.Option_service.option_search_for_update(servey_result
	 * .getOption_id()); servey_result.setOption(option_result);
	 * 
	 * // get user
	 * 
	 * User user = this.signUpService.search(servey_result.getUser_id());
	 * 
	 * servey_result.setUser(user);
	 * 
	 * }
	 * 
	 * }
	 * 
	 * question.setSurvey_result(survey_result);
	 * 
	 * } }
	 * 
	 * the_Survey.setQuestion(question_list); } return the_Survey;
	 * 
	 * }
	 */
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_Surveys", httpMethod = "GET", notes = "updates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_Surveys", headers = "Accept=application/json")
	@ResponseBody
	public List<Survey> get_surveys() throws Exception {

		List<Survey> the_Survey = Survey_Default_Activity_service.get_surveys();

		return the_Survey;

	}

	@RequestMapping(method = RequestMethod.GET, value = "/get_all_survey_table", headers = "Accept=application/json")
	@ResponseBody
	public ArrayList<Survey> get_all_survey_table() throws Exception {

		ArrayList<Survey> Survey_list = new ArrayList<Survey>();

		Survey_list = Survey_Default_Activity_service.get_all_survey_table();

		return Survey_list;

	}

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/create_survey_new", httpMethod = "POST", notes = "creates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.POST, value = "/create_survey_new", headers = "Accept=application/json")
	@ResponseBody
	public SurveyDTO create_survey_new(@RequestBody SurveyDTO the_SurveyDTO)
			throws Exception {

		return Survey_Default_Activity_service.create_survey(the_SurveyDTO,
				getUser());
	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/update_survey_new", httpMethod = "PUT", notes = "updates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.PUT, value = "/update_survey_new", headers = "Accept=application/json")
	@ResponseBody
	public SurveyDTO update_survey_new(@RequestBody SurveyDTO the_SurveyDTO)
			throws Exception {

		return Survey_Default_Activity_service.create_survey(the_SurveyDTO,
				getUser());

	}

	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_all_survey_new", httpMethod = "GET", notes = "updates a noun of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_all_survey_new", headers = "Accept=application/json")
	@ResponseBody
	public List<SurveyDTO> get_all_survey_new() throws Exception {

		List<Survey> survey_list = Survey_Default_Activity_service
				.get_all_survey_new();

		return EntityToDTO.convertSurvey(survey_list);

	}
	
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_survey_by_id_new/{Survey_id}", httpMethod = "GET", notes = "special search that gets all values of Survey", response = Survey.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_survey_by_id_new/{Survey_id}", headers = "Accept=application/json")
	@ResponseBody
	public SurveyDTO get_survey_by_id_new(
			@PathVariable("Survey_id") long Survey_id) throws Exception {

		Survey survey = Survey_Default_Activity_service
				.survey_search_for_update(Survey_id);

		return EntityToDTO.convertSurvey(survey);

	}

}