package com.geppetto.surveybuilder.controller;

import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.geppetto.surveybuilder.domain.core.Servey_result;
import com.geppetto.surveybuilder.service.Servey_result_Service;
import com.uploadcare.api.Client;
import com.uploadcare.upload.FileUploader;
import com.uploadcare.upload.UploadFailureException;
import com.uploadcare.upload.Uploader;
import com.uploadcare.urls.CdnPathBuilder;
import com.uploadcare.urls.Urls;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

/**
 * 
 * @author Geppetto Generated Code</br> Date Created: </br>
 * @since </br> build: </p>
 *
 *        code was generated by the Geppetto System </br> Gepppetto system
 *        Copyright - Geppetto LLC 2014 - 2015</br> The generated code is free
 *        to use by anyone</p>
 *
 *
 *
 */

@Api(value = "/Servey_result_Default_Activity", description = "Servey_result_Default_Activity of Servey_result_Default_Activity", produces = "application/json")
@Controller("Servey_result_Default_ActivityController")
@RequestMapping("/Servey_result_Default_Activity")
public class Servey_result_Controller extends GpBaseController {

	Servey_result_Service Servey_result_Default_Activity_service;

	public Servey_result_Service get_Servey_result_Default_Activity_service() {
		return Servey_result_Default_Activity_service;
	}

	@Resource(name = "Servey_result_Default_ActivityService")
	public void set_Servey_result_Default_Activity_service(
			Servey_result_Service Servey_result_Default_Activity_service) {
		this.Servey_result_Default_Activity_service = Servey_result_Default_Activity_service;
	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/create_Servey_result", httpMethod = "POST", notes = "creates a noun of Servey_result", response = Servey_result.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.POST, value = "/create_Servey_result", headers = "Accept=application/json")
	@ResponseBody
	public Servey_result create_Servey_result(
			@RequestBody Servey_result the_Servey_result) throws Exception {

		Servey_result a_Servey_result;

		a_Servey_result = Servey_result_Default_Activity_service
				.create_servey_result(the_Servey_result, super.getUser());

		return a_Servey_result;

	}

	@ApiOperation(value = "/create_Servey_result_list", httpMethod = "POST", notes = "creates a noun of Servey_result", response = Servey_result.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.POST, value = "/create_Servey_result_list", headers = "Accept=application/json")
	@ResponseBody
	public List<Servey_result> create_Servey_result_list(
			@RequestBody List<Servey_result> a_Servey_result_list)
			throws Exception {
		List<Servey_result> new_Servey_result = new ArrayList<Servey_result>();
		if (a_Servey_result_list != null) {
			Servey_result a_Servey_result = null;

			for (Servey_result the_Servey_result : a_Servey_result_list) {

				a_Servey_result = Servey_result_Default_Activity_service
						.create_servey_result(the_Servey_result,
								super.getUser());

				new_Servey_result.add(a_Servey_result);
			}
		}
		return new_Servey_result;
	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/search_for_update_Servey_result/{Servey_result_id}", httpMethod = "GET", notes = "updates a noun of Servey_result", response = Servey_result.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/search_for_update_Servey_result/{Servey_result_id}", headers = "Accept=application/json")
	@ResponseBody
	public Servey_result search_for_update_Servey_result(
			@PathVariable("Servey_result_id") long Servey_result_id)
			throws Exception {

		Servey_result the_Servey_result = new Servey_result();

		the_Servey_result = Servey_result_Default_Activity_service
				.servey_result_search_for_update(Servey_result_id,
						super.getUser());

		return the_Servey_result;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/update_Servey_result", httpMethod = "PUT", notes = "updates a noun of Servey_result", response = Servey_result.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.PUT, value = "/update_Servey_result", headers = "Accept=application/json")
	@ResponseBody
	public Servey_result update_Servey_result(
			@RequestBody Servey_result the_Servey_result) throws Exception {

		Servey_result a_Servey_result;

		a_Servey_result = Servey_result_Default_Activity_service
				.update_servey_result(the_Servey_result, super.getUser());

		return a_Servey_result;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/delete_Servey_result/{Servey_result_id}", httpMethod = "DELETE", notes = "deletes a noun of Servey_result", response = Servey_result.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.DELETE, value = "/delete_Servey_result/{Servey_result_id}", headers = "Accept=application/json")
	@ResponseBody
	public String delete_Servey_result(
			@PathVariable("Servey_result_id") long Servey_result_id)
			throws Exception {

		String service_return_msg = "";

		service_return_msg = Servey_result_Default_Activity_service
				.delete_servey_result(Servey_result_id, super.getUser());

		return service_return_msg;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/get_all_Servey_result", httpMethod = "GET", notes = "special search that gets all values of Servey_result", response = Servey_result.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/get_all_Servey_result", headers = "Accept=application/json")
	@ResponseBody
	public ArrayList<Servey_result> get_all_Servey_result() throws Exception {

		ArrayList<Servey_result> Servey_result_list = new ArrayList<Servey_result>();

		Servey_result_list = Servey_result_Default_Activity_service
				.get_all_servey_result();

		return Servey_result_list;

	}

	// auths not ready at this time
	@CrossOrigin(origins = "*")
	@ApiOperation(value = "/search_Servey_result", httpMethod = "GET", notes = "searches a noun of Servey_result", response = Servey_result.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The request was fulfilled"),
			@ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
			@ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
			@ApiResponse(code = 400, message = "Bad request due to decoding the data"),
			@ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })
	@RequestMapping(method = RequestMethod.GET, value = "/search_Servey_result", headers = "Accept=application/json")
	@ResponseBody
	public ArrayList<Servey_result> search_Servey_result(
			@RequestParam(required = false, value = "question_id", defaultValue = "%%") String question_id,
			@RequestParam(required = false, value = "option_id", defaultValue = "%%") String option_id,
			@RequestParam(required = false, value = "client_id", defaultValue = "%%") String client_id,
			@RequestParam(required = false, value = "product_id", defaultValue = "%%") String product_id,
			@RequestParam(required = false, value = "country_id", defaultValue = "%%") String country_id,
			@RequestParam(required = false, value = "survey_id", defaultValue = "%%") String survey_id,
			@RequestParam(required = false, value = "user_id", defaultValue = "%%") String user_id,
			@RequestParam(required = false, value = "answer", defaultValue = "%%") String answer)
			throws Exception {

		ArrayList<Servey_result> Servey_result_list = new ArrayList<Servey_result>();

		Servey_result_list = Servey_result_Default_Activity_service
				.search_servey_result(question_id, option_id, client_id,
						product_id, country_id, survey_id, user_id, answer);

		return Servey_result_list;

	}
	
	  @RequestMapping(value = "/uploadFile", method = RequestMethod.POST)
	  @ResponseBody
	  public URLResponse uploadFile(
	      @RequestParam("uploadfile") MultipartFile uploadfile) throws IOException, UploadFailureException {
		  String Public_key = "d7fed2c928cd2b2043fb";
		  String Secret_key = "d281f6cde03a923ae02f";
	   
	      // Get the filename
	      String filename = uploadfile.getOriginalFilename();
	      System.out.println("filename"+filename);
        

	      Client client = new Client(Public_key,Secret_key);	      
	      java.io.File file = new java.io.File("mirrow.jpg");
	      java.io.File sourceFile = convert(uploadfile);
	      Uploader uploader = new FileUploader(client, sourceFile);
          com.uploadcare.api.File uploadedfile = uploader.upload().save();
          System.out.println(uploadedfile.getOriginalFileUrl());
	          
          //get a cdn url
          //shuld get the image id 85b5644f-e692-4855-9db0-8c5a83096e25
          com.uploadcare.api.File newfile = client.getFile(uploadedfile.getFileId());
          CdnPathBuilder builder = newfile.cdnPath();
	                  
          URI url = Urls.cdn(builder);          
          System.out.println("CDN URL"+url);
          
          URLResponse urlresp = new URLResponse();
          urlresp.setSrc(url.toString());
          
          return urlresp;
	   	   
	  }
	  
	  public java.io.File convert(MultipartFile file) throws IOException
	  {    
	      java.io.File convFile = new java.io.File(file.getOriginalFilename());
	      convFile.createNewFile(); 
	      FileOutputStream fos = new FileOutputStream(convFile); 
	      fos.write(file.getBytes());
	      fos.close(); 
	      return convFile;
	  }
	  
	  	class URLResponse {
	  
			String src ="";
	
			public String getSrc() {
				return src;
			}
	
			public void setSrc(String src) {
				this.src = src;
			}		  
	  }
}